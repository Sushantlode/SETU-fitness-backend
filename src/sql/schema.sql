CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE OR REPLACE FUNCTION touch_updated_at() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at=NOW(); RETURN NEW; END; $$ LANGUAGE plpgsql;
CREATE TABLE IF NOT EXISTS ftn_profiles (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL UNIQUE, units TEXT NOT NULL DEFAULT 'metric', timezone TEXT, activity_level TEXT, target_calories INTEGER, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE TRIGGER trg_ftn_profiles_touch BEFORE UPDATE ON ftn_profiles FOR EACH ROW EXECUTE FUNCTION touch_updated_at();
CREATE TABLE IF NOT EXISTS ftn_hydration_goals (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, daily_ml INTEGER NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS idx_hydration_goals_user_active ON ftn_hydration_goals(user_id, is_active);
CREATE TABLE IF NOT EXISTS ftn_water_logs (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, logged_at TIMESTAMPTZ NOT NULL, amount_ml INTEGER NOT NULL, source TEXT, notes TEXT, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS idx_water_logs_user_time ON ftn_water_logs(user_id, logged_at DESC);
CREATE TABLE IF NOT EXISTS ftn_meals (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, name TEXT NOT NULL, meal_type TEXT, total_calories INTEGER, image_s3_key TEXT, notes TEXT, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE TRIGGER trg_meals_touch BEFORE UPDATE ON ftn_meals FOR EACH ROW EXECUTE FUNCTION touch_updated_at();
CREATE TABLE IF NOT EXISTS ftn_meal_items (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), meal_id UUID NOT NULL, food_id UUID, custom_food_name TEXT, quantity NUMERIC(10,2), unit TEXT, calories INTEGER, protein_g NUMERIC(8,2), carbs_g NUMERIC(8,2), fat_g NUMERIC(8,2), FOREIGN KEY (meal_id) REFERENCES ftn_meals(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS ftn_meal_logs (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, eaten_at TIMESTAMPTZ NOT NULL, meal_type TEXT NOT NULL, meal_id UUID, total_calories INTEGER, notes TEXT, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE, FOREIGN KEY (meal_id) REFERENCES ftn_meals(id) ON DELETE SET NULL);
CREATE INDEX IF NOT EXISTS idx_meal_logs_user_time ON ftn_meal_logs(user_id, eaten_at DESC);
CREATE TABLE IF NOT EXISTS ftn_recipes (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, title TEXT NOT NULL, description TEXT, total_time_min INTEGER, servings INTEGER, image_s3_key TEXT, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE TRIGGER trg_recipes_touch BEFORE UPDATE ON ftn_recipes FOR EACH ROW EXECUTE FUNCTION touch_updated_at();
CREATE TABLE IF NOT EXISTS ftn_recipe_items (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), recipe_id UUID NOT NULL, ingredient_name TEXT NOT NULL, quantity NUMERIC(10,2), unit TEXT, notes TEXT, FOREIGN KEY (recipe_id) REFERENCES ftn_recipes(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS ftn_meal_plan_headers (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, name TEXT NOT NULL, start_date DATE NOT NULL, end_date DATE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS idx_plan_user_active ON ftn_meal_plan_headers(user_id, is_active);
CREATE TRIGGER trg_plan_headers_touch BEFORE UPDATE ON ftn_meal_plan_headers FOR EACH ROW EXECUTE FUNCTION touch_updated_at();
CREATE TABLE IF NOT EXISTS ftn_meal_plan_days (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), plan_id UUID NOT NULL, day_index INTEGER NOT NULL, day_date DATE, UNIQUE (plan_id, day_index), FOREIGN KEY (plan_id) REFERENCES ftn_meal_plan_headers(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS ftn_meal_plan_slots (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), plan_day_id UUID NOT NULL, slot_type TEXT NOT NULL, meal_id UUID, notes TEXT, FOREIGN KEY (plan_day_id) REFERENCES ftn_meal_plan_days(id) ON DELETE CASCADE, FOREIGN KEY (meal_id) REFERENCES ftn_meals(id) ON DELETE SET NULL);
CREATE INDEX IF NOT EXISTS idx_plan_slots_day ON ftn_meal_plan_slots(plan_day_id);
CREATE TABLE IF NOT EXISTS ftn_favorite_meals (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, meal_id UUID NOT NULL, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), UNIQUE (user_id, meal_id), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE, FOREIGN KEY (meal_id) REFERENCES ftn_meals(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS ftn_swaps (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), title TEXT NOT NULL, description TEXT, from_item TEXT, to_item TEXT, benefit TEXT, image_s3_key TEXT, is_public BOOLEAN NOT NULL DEFAULT TRUE, owner_user_id INTEGER, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), FOREIGN KEY (owner_user_id) REFERENCES users(user_id) ON DELETE SET NULL);
CREATE TABLE IF NOT EXISTS ftn_user_saved_swaps (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, swap_id UUID NOT NULL, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), UNIQUE (user_id, swap_id), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE, FOREIGN KEY (swap_id) REFERENCES ftn_swaps(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS ftn_motivations (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), quote TEXT NOT NULL, author TEXT, is_public BOOLEAN NOT NULL DEFAULT TRUE, image_s3_key TEXT, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW());
CREATE TABLE IF NOT EXISTS ftn_user_motivations (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id INTEGER NOT NULL, motivation_id UUID NOT NULL, is_favorite BOOLEAN NOT NULL DEFAULT FALSE, seen_at TIMESTAMPTZ, created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), UNIQUE (user_id, motivation_id), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE, FOREIGN KEY (motivation_id) REFERENCES ftn_motivations(id) ON DELETE CASCADE);
